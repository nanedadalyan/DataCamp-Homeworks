{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T13:09:05.104145Z",
     "start_time": "2019-12-02T13:09:04.101Z"
    }
   },
   "outputs": [],
   "source": [
    "import $ivy.`org.apache.spark::spark-sql:2.4.3` // Or use any other 2.x version here\n",
    "// import $ivy.`sh.almond::almond-spark:_` // Added automatically on importing Spark\n",
    "\n",
    "import org.apache.spark.sql._\n",
    "\n",
    "import org.apache.log4j.{Level, Logger}\n",
    "Logger.getLogger(\"org\").setLevel(Level.OFF)\n",
    "import org.apache.spark.SparkContext\n",
    "import org.apache.spark.SparkConf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[32mimport \u001b[39m\u001b[36morg.apache.spark.sql.functions._\n",
       "\u001b[39m"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import org.apache.spark.sql.functions._\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T13:53:00.999636Z",
     "start_time": "2019-12-02T13:53:00.832Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[32mimport \u001b[39m\u001b[36morg.apache.spark.sql.Column\n",
       "\u001b[39m\n",
       "\u001b[32mimport \u001b[39m\u001b[36morg.apache.spark.sql.types.{DataType, DateType, TimestampType}\n",
       "\u001b[39m\n",
       "\u001b[32mimport \u001b[39m\u001b[36morg.apache.spark.sql.functions._\n",
       "\u001b[39m"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import org.apache.spark.sql.Column\n",
    "import org.apache.spark.sql.types.{DataType, DateType, TimestampType}\n",
    "import org.apache.spark.sql.functions._"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T13:09:11.556699Z",
     "start_time": "2019-12-02T13:09:10.944Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "\u001b[36mspark\u001b[39m: \u001b[32mSparkSession\u001b[39m = org.apache.spark.sql.SparkSession@31c5bd77\n",
       "defined \u001b[32mfunction\u001b[39m \u001b[36msc\u001b[39m"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var spark = SparkSession\n",
    ".builder()\n",
    ".appName(\"Java Spark SQL basic example\")\n",
    ".config(\"spark.master\", \"local\")\n",
    ".getOrCreate();\n",
    "\n",
    "def sc = spark.sparkContext\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36mframe\u001b[39m: \u001b[32mDataFrame\u001b[39m = [device_id: string, event_type: string ... 2 more fields]"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "val frame = spark.read.\n",
    "option(\"header\", true).\n",
    "option(\"inferSchema\",true).\n",
    "csv(\"data.csv\").\n",
    "select(\"device_id\",\"event_type\",\"timestamp\",\"session_id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T13:29:09.892869Z",
     "start_time": "2019-12-02T13:29:09.775Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- device_id: string (nullable = true)\n",
      " |-- event_type: string (nullable = true)\n",
      " |-- timestamp: timestamp (nullable = true)\n",
      " |-- session_id: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "frame.printSchema"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36mdf\u001b[39m: \u001b[32mDataFrame\u001b[39m = [device_id: string, event_type: string ... 3 more fields]"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var df = frame.withColumn(\"date\", frame(\"timestamp\").cast(\"Date\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36mnewdf\u001b[39m: \u001b[32mDataFrame\u001b[39m = [date: date, device_id: string]"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var newdf = df.select(\"date\",\"device_id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+-------------------------+\n",
      "|      date|count(DISTINCT device_id)|\n",
      "+----------+-------------------------+\n",
      "|2018-02-02|                    25355|\n",
      "|2018-02-03|                    26566|\n",
      "|2018-02-04|                    28029|\n",
      "|2018-02-05|                    25784|\n",
      "|2018-02-06|                    24964|\n",
      "|2018-02-07|                    24015|\n",
      "|2018-02-08|                    25038|\n",
      "|2018-02-09|                    25725|\n",
      "|2018-02-10|                    26859|\n",
      "|2018-02-11|                    28456|\n",
      "|2018-02-12|                    30150|\n",
      "|2018-02-13|                    26769|\n",
      "|2018-02-14|                    26365|\n",
      "|2018-02-15|                    25643|\n",
      "|2018-02-16|                    26641|\n",
      "|2018-02-17|                    26357|\n",
      "|2018-02-18|                    27809|\n",
      "|2018-02-19|                    25890|\n",
      "|2018-02-20|                    25622|\n",
      "|2018-02-21|                    26433|\n",
      "|2018-02-22|                    26668|\n",
      "|2018-02-23|                    27473|\n",
      "|2018-02-24|                    28611|\n",
      "|2018-02-25|                    29068|\n",
      "|2018-02-26|                    26797|\n",
      "|2018-02-27|                    26442|\n",
      "|2018-02-28|                    26775|\n",
      "|2018-03-01|                    27604|\n",
      "|2018-03-02|                    27138|\n",
      "+----------+-------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "//Calculate daily active users trend over month\n",
    "newdf.groupBy(\"date\").agg(countDistinct(\"device_id\")).orderBy(\"date\").show(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36mo\u001b[39m: \u001b[32mDataFrame\u001b[39m = [event_type: string, count(DISTINCT device_id): bigint]"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "//funnel\n",
    "var o = df.groupBy(\"event_type\").agg(countDistinct(\"device_id\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+-------------------------+\n",
      "|       event_type|count(DISTINCT device_id)|\n",
      "+-----------------+-------------------------+\n",
      "|editor_done_click|                     5221|\n",
      "|     photo_upload|                     5592|\n",
      "|      editor_open|                     9502|\n",
      "+-----------------+-------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "o.filter(o(\"event_type\").isin(\"editor_open\",\"editor_done_click\",\"photo_upload\")).show\n",
    "//I am not sure if I did it correctly, but my funnel numbers are not in descending order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "//retention_editor_open"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36mddf\u001b[39m: \u001b[32mDataset\u001b[39m[\u001b[32mRow\u001b[39m] = [device_id: string, event_type: string ... 3 more fields]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var ddf = df.filter(df(\"event_type\") === \"editor_open\")//here i have filtered editor open"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36meditor\u001b[39m: \u001b[32mDataFrame\u001b[39m = [device_id: string, date: date]"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var editor = ddf.select(\"device_id\",\"date\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36mneweditor\u001b[39m: \u001b[32mDataFrame\u001b[39m = [device_id: string, date: date]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var neweditor = editor.withColumn(\"date\",\n",
    "          date_sub(col(\"date\"),7))//I have created a new dataframe and changed the dates substracting 7 days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36mneweditor1\u001b[39m: \u001b[32mDataFrame\u001b[39m = [device_id: string, date: date ... 1 more field]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var neweditor1 = neweditor.withColumn(\"gg\",lit(1))//added 1-s in order to join with the initial df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36mty\u001b[39m: \u001b[32mDataFrame\u001b[39m = [device_id: string, date: date ... 1 more field]"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var ty = editor.join(neweditor1,Seq(\"device_id\",\"date\"), \"left\")//in case of join in gg column should be written 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+----+---+\n",
      "|device_id|date| gg|\n",
      "+---------+----+---+\n",
      "+---------+----+---+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "ty.filter(ty(\"gg\") === 1).show// according to my calculations the retention rate is 0 :/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36mj\u001b[39m: \u001b[32mDataset\u001b[39m[\u001b[32mRow\u001b[39m] = [session_id: string, count(event_type): bigint]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "//describe user activity\n",
    "var j = df.groupBy(\"session_id\").agg(count(\"event_type\")).orderBy(col(\"count(event_type)\").desc)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------------------+----------------------+----------------------+\n",
      "|min(count(event_type))|max(count(event_type))|avg(count(event_type))|\n",
      "+----------------------+----------------------+----------------------+\n",
      "|                     1|                     9|       1.0020073598904|\n",
      "+----------------------+----------------------+----------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "j.agg(min(\"count(event_type)\"), max(\"count(event_type)\"), mean(\"count(event_type)\")).show\n",
    "//from this table we can see that the max number of events during a session is 9, the average is close to 1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Scala (2.11)",
   "language": "scala",
   "name": "scala211"
  },
  "language_info": {
   "codemirror_mode": "text/x-scala",
   "file_extension": ".scala",
   "mimetype": "text/x-scala",
   "name": "scala",
   "nbconvert_exporter": "script",
   "version": "2.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
